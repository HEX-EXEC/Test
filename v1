--[[    
    ????     ????  ??????????? ??       ??      ??????????   ??????????? ???       ???  ??????????   ??????????  ???       ???  ??????????? ???          
    ????     ???? ???????????? ???     ???     ???????????? ???????????? ????      ??? ???????????? ???????????? ????      ??? ???????????? ???          
    ????     ???? ????????????  ???   ???      ???????????? ???????????? ?????     ???     ???          ???      ?????     ??? ???????????? ???          
    ????     ???? ????           ??? ???       ???          ????         ??????    ???     ???          ???      ??????    ??? ????         ???          
    ????????????? ????????????    ?????        ???????????? ???????????? ??? ???   ???     ???          ???      ??? ???   ??? ???????????? ???          
    ????????????? ????????????     ???         ???????????? ???????????? ???  ???  ???     ???          ???      ???  ???  ??? ???????????? ???          
    ????????????? ????????????    ?????         ??????????? ???????????? ???   ??? ???     ???          ???      ???   ??? ??? ???????????? ???          
    ????     ???? ????           ??? ???                ??? ????         ???    ??????     ???          ???      ???    ?????? ????         ???          
    ????     ???? ????????????  ???   ???       ??????????? ???????????? ???     ?????     ???          ???      ???     ????? ???????????? ??? 
    ????     ???? ???????????? ???     ???     ???????????? ???????????? ???      ????     ???     ????????????  ???      ???? ???????????? ?????????????
    ????     ????  ??????????? ??       ??     ???????????   ??????????? ???       ???     ???      ??????????   ???       ???  ???????????  ???????????

    HexSentinel Lua Obfuscator v1.0
    This script is protected by HexSentinel.
    Any attempts to reverse engineer or modify it will result in an IP blacklist from ALL services.
]]
local VM_ENV = {}
VM_ENV['assert'] = assert
VM_ENV['error'] = error
VM_ENV['ipairs'] = ipairs
VM_ENV['next'] = next
VM_ENV['pairs'] = pairs
VM_ENV['pcall'] = pcall
VM_ENV['print'] = print
VM_ENV['select'] = select
VM_ENV['tonumber'] = tonumber
VM_ENV['tostring'] = tostring
VM_ENV['type'] = type
VM_ENV['unpack'] = unpack
VM_ENV['xpcall'] = xpcall
VM_ENV['string'] = string
VM_ENV['table'] = table
VM_ENV['math'] = math
VM_ENV['coroutine'] = coroutine
VM_ENV['makefolder'] = (getgenv and getgenv()['makefolder']) or _G['makefolder'] or _G['makefolder']
VM_ENV['clonefunction'] = (getgenv and getgenv()['clonefunction']) or _G['clonefunction'] or _G['clonefunction']
VM_ENV['isscriptable'] = (getgenv and getgenv()['isscriptable']) or _G['isscriptable'] or _G['isscriptable']
VM_ENV['consolecreate'] = (getgenv and getgenv()['consolecreate']) or _G['consolecreate'] or _G['consolecreate']
VM_ENV['queue_on_teleport'] = (getgenv and getgenv()['queue_on_teleport']) or _G['queue_on_teleport'] or _G['queue_on_teleport']
VM_ENV['getexecutorname'] = (getgenv and getgenv()['getexecutorname']) or _G['getexecutorname'] or _G['getexecutorname']
VM_ENV['rconsoleprint'] = (getgenv and getgenv()['rconsoleprint']) or _G['rconsoleprint'] or _G['rconsoleprint']
VM_ENV['consoledestroy'] = (getgenv and getgenv()['consoledestroy']) or _G['consoledestroy'] or _G['consoledestroy']
VM_ENV['isgameactive'] = (getgenv and getgenv()['isgameactive']) or _G['isgameactive'] or _G['isgameactive']
VM_ENV['http'] = (getgenv and getgenv()['http']) or _G['http'] or _G['http']
VM_ENV['getcallingscript'] = (getgenv and getgenv()['getcallingscript']) or _G['getcallingscript'] or _G['getcallingscript']
VM_ENV['setthreadcontext'] = (getgenv and getgenv()['setthreadcontext']) or _G['setthreadcontext'] or _G['setthreadcontext']
VM_ENV['about'] = (getgenv and getgenv()['about']) or _G['about'] or _G['about']
VM_ENV['toclipboard'] = (getgenv and getgenv()['toclipboard']) or _G['toclipboard'] or _G['toclipboard']
VM_ENV['LockModule'] = (getgenv and getgenv()['LockModule']) or _G['LockModule'] or _G['LockModule']
VM_ENV['gethiddenproperties'] = (getgenv and getgenv()['gethiddenproperties']) or _G['gethiddenproperties'] or _G['gethiddenproperties']
VM_ENV['request'] = (getgenv and getgenv()['request']) or _G['request'] or _G['request']
VM_ENV['getthreadcontext'] = (getgenv and getgenv()['getthreadcontext']) or _G['getthreadcontext'] or _G['getthreadcontext']
VM_ENV['cloneref'] = (getgenv and getgenv()['cloneref']) or _G['cloneref'] or _G['cloneref']
VM_ENV['decompile'] = (getgenv and getgenv()['decompile']) or _G['decompile'] or _G['decompile']
VM_ENV['isexecutorclosure'] = (getgenv and getgenv()['isexecutorclosure']) or _G['isexecutorclosure'] or _G['isexecutorclosure']
VM_ENV['savegame'] = (getgenv and getgenv()['savegame']) or _G['savegame'] or _G['savegame']
VM_ENV['hookfunction'] = (getgenv and getgenv()['hookfunction']) or _G['hookfunction'] or _G['hookfunction']
VM_ENV['getexecutorversion'] = (getgenv and getgenv()['getexecutorversion']) or _G['getexecutorversion'] or _G['getexecutorversion']
VM_ENV['isfile'] = (getgenv and getgenv()['isfile']) or _G['isfile'] or _G['isfile']
VM_ENV['GetUnlockedModules'] = (getgenv and getgenv()['GetUnlockedModules']) or _G['GetUnlockedModules'] or _G['GetUnlockedModules']
VM_ENV['getrbxsignals'] = (getgenv and getgenv()['getrbxsignals']) or _G['getrbxsignals'] or _G['getrbxsignals']
VM_ENV['rconsoleinfo'] = (getgenv and getgenv()['rconsoleinfo']) or _G['rconsoleinfo'] or _G['rconsoleinfo']
VM_ENV['RaycastParams'] = (getgenv and getgenv()['RaycastParams']) or _G['RaycastParams'] or _G['RaycastParams']
VM_ENV['queueonteleport'] = (getgenv and getgenv()['queueonteleport']) or _G['queueonteleport'] or _G['queueonteleport']
VM_ENV['getrunningscripts'] = (getgenv and getgenv()['getrunningscripts']) or _G['getrunningscripts'] or _G['getrunningscripts']
VM_ENV['consolesettitle'] = (getgenv and getgenv()['consolesettitle']) or _G['consolesettitle'] or _G['consolesettitle']
VM_ENV['setidentity'] = (getgenv and getgenv()['setidentity']) or _G['setidentity'] or _G['setidentity']
VM_ENV['mouse1click'] = (getgenv and getgenv()['mouse1click']) or _G['mouse1click'] or _G['mouse1click']
VM_ENV['HttpPost'] = (getgenv and getgenv()['HttpPost']) or _G['HttpPost'] or _G['HttpPost']
VM_ENV['isfolder'] = (getgenv and getgenv()['isfolder']) or _G['isfolder'] or _G['isfolder']
VM_ENV['gethiddenproperty'] = (getgenv and getgenv()['gethiddenproperty']) or _G['gethiddenproperty'] or _G['gethiddenproperty']
VM_ENV['identifyexecutor'] = (getgenv and getgenv()['identifyexecutor']) or _G['identifyexecutor'] or _G['identifyexecutor']
VM_ENV['setrbxclipboard'] = (getgenv and getgenv()['setrbxclipboard']) or _G['setrbxclipboard'] or _G['setrbxclipboard']
VM_ENV['getscripts'] = (getgenv and getgenv()['getscripts']) or _G['getscripts'] or _G['getscripts']
VM_ENV['getnilinstances'] = (getgenv and getgenv()['getnilinstances']) or _G['getnilinstances'] or _G['getnilinstances']
VM_ENV['dumpstring'] = (getgenv and getgenv()['dumpstring']) or _G['dumpstring'] or _G['dumpstring']
VM_ENV['iscclosure'] = (getgenv and getgenv()['iscclosure']) or _G['iscclosure'] or _G['iscclosure']
VM_ENV['keypress'] = (getgenv and getgenv()['keypress']) or _G['keypress'] or _G['keypress']
VM_ENV['getproperties'] = (getgenv and getgenv()['getproperties']) or _G['getproperties'] or _G['getproperties']
VM_ENV['setclipboard'] = (getgenv and getgenv()['setclipboard']) or _G['setclipboard'] or _G['setclipboard']
VM_ENV['HttpGet'] = (getgenv and getgenv()['HttpGet']) or _G['HttpGet'] or _G['HttpGet']
VM_ENV['mouse2click'] = (getgenv and getgenv()['mouse2click']) or _G['mouse2click'] or _G['mouse2click']
VM_ENV['sethiddenproperty'] = (getgenv and getgenv()['sethiddenproperty']) or _G['sethiddenproperty'] or _G['sethiddenproperty']
VM_ENV['writefile'] = (getgenv and getgenv()['writefile']) or _G['writefile'] or _G['writefile']
VM_ENV['base64_encode'] = (getgenv and getgenv()['base64_encode']) or _G['base64_encode'] or _G['base64_encode']
VM_ENV['getscriptclosure'] = (getgenv and getgenv()['getscriptclosure']) or _G['getscriptclosure'] or _G['getscriptclosure']
VM_ENV['getconnections'] = (getgenv and getgenv()['getconnections']) or _G['getconnections'] or _G['getconnections']
VM_ENV['checkcaller'] = (getgenv and getgenv()['checkcaller']) or _G['checkcaller'] or _G['checkcaller']
VM_ENV['rconsoledestroy'] = (getgenv and getgenv()['rconsoledestroy']) or _G['rconsoledestroy'] or _G['rconsoledestroy']
VM_ENV['setscriptbytecode'] = (getgenv and getgenv()['setscriptbytecode']) or _G['setscriptbytecode'] or _G['setscriptbytecode']
VM_ENV['setreadonly'] = (getgenv and getgenv()['setreadonly']) or _G['setreadonly'] or _G['setreadonly']
VM_ENV['setsimulationradius'] = (getgenv and getgenv()['setsimulationradius']) or _G['setsimulationradius'] or _G['setsimulationradius']
VM_ENV['setrenderproperty'] = (getgenv and getgenv()['setrenderproperty']) or _G['setrenderproperty'] or _G['setrenderproperty']
VM_ENV['base64'] = (getgenv and getgenv()['base64']) or _G['base64'] or _G['base64']
VM_ENV['UnlockModule'] = (getgenv and getgenv()['UnlockModule']) or _G['UnlockModule'] or _G['UnlockModule']
VM_ENV['saveinstance'] = (getgenv and getgenv()['saveinstance']) or _G['saveinstance'] or _G['saveinstance']
VM_ENV['getinstances'] = (getgenv and getgenv()['getinstances']) or _G['getinstances'] or _G['getinstances']
VM_ENV['checkclosure'] = (getgenv and getgenv()['checkclosure']) or _G['checkclosure'] or _G['checkclosure']
VM_ENV['firetouchinterest'] = (getgenv and getgenv()['firetouchinterest']) or _G['firetouchinterest'] or _G['firetouchinterest']
VM_ENV['cache'] = (getgenv and getgenv()['cache']) or _G['cache'] or _G['cache']
VM_ENV['isnetworkowner'] = (getgenv and getgenv()['isnetworkowner']) or _G['isnetworkowner'] or _G['isnetworkowner']
VM_ENV['compareinstances'] = (getgenv and getgenv()['compareinstances']) or _G['compareinstances'] or _G['compareinstances']
VM_ENV['Drawing'] = (getgenv and getgenv()['Drawing']) or _G['Drawing'] or _G['Drawing']
VM_ENV['UserSettings'] = (getgenv and getgenv()['UserSettings']) or _G['UserSettings'] or _G['UserSettings']
VM_ENV['delfile'] = (getgenv and getgenv()['delfile']) or _G['delfile'] or _G['delfile']
VM_ENV['getrenderproperty'] = (getgenv and getgenv()['getrenderproperty']) or _G['getrenderproperty'] or _G['getrenderproperty']
VM_ENV['readfile'] = (getgenv and getgenv()['readfile']) or _G['readfile'] or _G['readfile']
VM_ENV['gethui'] = (getgenv and getgenv()['gethui']) or _G['gethui'] or _G['gethui']
VM_ENV['consoleprint'] = (getgenv and getgenv()['consoleprint']) or _G['consoleprint'] or _G['consoleprint']
VM_ENV['restorescriptbytecode'] = (getgenv and getgenv()['restorescriptbytecode']) or _G['restorescriptbytecode'] or _G['restorescriptbytecode']
VM_ENV['getthreadidentity'] = (getgenv and getgenv()['getthreadidentity']) or _G['getthreadidentity'] or _G['getthreadidentity']
VM_ENV['Ray'] = (getgenv and getgenv()['Ray']) or _G['Ray'] or _G['Ray']
VM_ENV['getcustomasset'] = (getgenv and getgenv()['getcustomasset']) or _G['getcustomasset'] or _G['getcustomasset']
VM_ENV['replaceclosure'] = (getgenv and getgenv()['replaceclosure']) or _G['replaceclosure'] or _G['replaceclosure']
VM_ENV['Game'] = (getgenv and getgenv()['Game']) or _G['Game'] or _G['Game']
VM_ENV['isreadonly'] = (getgenv and getgenv()['isreadonly']) or _G['isreadonly'] or _G['isreadonly']
VM_ENV['isrenderobj'] = (getgenv and getgenv()['isrenderobj']) or _G['isrenderobj'] or _G['isrenderobj']
VM_ENV['workspace'] = (getgenv and getgenv()['workspace']) or _G['workspace'] or _G['workspace']
VM_ENV['whatexecutor'] = (getgenv and getgenv()['whatexecutor']) or _G['whatexecutor'] or _G['whatexecutor']
VM_ENV['delfolder'] = (getgenv and getgenv()['delfolder']) or _G['delfolder'] or _G['delfolder']
VM_ENV['getgenv'] = (getgenv and getgenv()['getgenv']) or _G['getgenv'] or _G['getgenv']
VM_ENV['keyrelease'] = (getgenv and getgenv()['keyrelease']) or _G['keyrelease'] or _G['keyrelease']
VM_ENV['game'] = (getgenv and getgenv()['game']) or _G['game'] or _G['game']
VM_ENV['cleardrawcache'] = (getgenv and getgenv()['cleardrawcache']) or _G['cleardrawcache'] or _G['cleardrawcache']
VM_ENV['consoleinput'] = (getgenv and getgenv()['consoleinput']) or _G['consoleinput'] or _G['consoleinput']
VM_ENV['getscripthash'] = (getgenv and getgenv()['getscripthash']) or _G['getscripthash'] or _G['getscripthash']
VM_ENV['Workspace'] = (getgenv and getgenv()['Workspace']) or _G['Workspace'] or _G['Workspace']
VM_ENV['typeof'] = (getgenv and getgenv()['typeof']) or _G['typeof'] or _G['typeof']
VM_ENV['WebSocket'] = (getgenv and getgenv()['WebSocket']) or _G['WebSocket'] or _G['WebSocket']
VM_ENV['lz4decompress'] = (getgenv and getgenv()['lz4decompress']) or _G['lz4decompress'] or _G['lz4decompress']
VM_ENV['lz4compress'] = (getgenv and getgenv()['lz4compress']) or _G['lz4compress'] or _G['lz4compress']
VM_ENV['getfpscap'] = (getgenv and getgenv()['getfpscap']) or _G['getfpscap'] or _G['getfpscap']
VM_ENV['base64_decode'] = (getgenv and getgenv()['base64_decode']) or _G['base64_decode'] or _G['base64_decode']
VM_ENV['crypt'] = (getgenv and getgenv()['crypt']) or _G['crypt'] or _G['crypt']
VM_ENV['getsenv'] = (getgenv and getgenv()['getsenv']) or _G['getsenv'] or _G['getsenv']
VM_ENV['fireproximityprompt'] = (getgenv and getgenv()['fireproximityprompt']) or _G['fireproximityprompt'] or _G['fireproximityprompt']
VM_ENV['rconsolename'] = (getgenv and getgenv()['rconsolename']) or _G['rconsolename'] or _G['rconsolename']
VM_ENV['rconsolesettitle'] = (getgenv and getgenv()['rconsolesettitle']) or _G['rconsolesettitle'] or _G['rconsolesettitle']
VM_ENV['getscriptfunction'] = (getgenv and getgenv()['getscriptfunction']) or _G['getscriptfunction'] or _G['getscriptfunction']
VM_ENV['islclosure'] = (getgenv and getgenv()['islclosure']) or _G['islclosure'] or _G['islclosure']
VM_ENV['rconsolewarn'] = (getgenv and getgenv()['rconsolewarn']) or _G['rconsolewarn'] or _G['rconsolewarn']
VM_ENV['rconsoleclear'] = (getgenv and getgenv()['rconsoleclear']) or _G['rconsoleclear'] or _G['rconsoleclear']
VM_ENV['mouse2press'] = (getgenv and getgenv()['mouse2press']) or _G['mouse2press'] or _G['mouse2press']
VM_ENV['Input'] = (getgenv and getgenv()['Input']) or _G['Input'] or _G['Input']
VM_ENV['rconsolecreate'] = (getgenv and getgenv()['rconsolecreate']) or _G['rconsolecreate'] or _G['rconsolecreate']
VM_ENV['consolewarn'] = (getgenv and getgenv()['consolewarn']) or _G['consolewarn'] or _G['consolewarn']
VM_ENV['consoleinfo'] = (getgenv and getgenv()['consoleinfo']) or _G['consoleinfo'] or _G['consoleinfo']
VM_ENV['consolename'] = (getgenv and getgenv()['consolename']) or _G['consolename'] or _G['consolename']
VM_ENV['hookinstance'] = (getgenv and getgenv()['hookinstance']) or _G['hookinstance'] or _G['hookinstance']
VM_ENV['mousescroll'] = (getgenv and getgenv()['mousescroll']) or _G['mousescroll'] or _G['mousescroll']
VM_ENV['appendfile'] = (getgenv and getgenv()['appendfile']) or _G['appendfile'] or _G['appendfile']
VM_ENV['getscriptbytecode'] = (getgenv and getgenv()['getscriptbytecode']) or _G['getscriptbytecode'] or _G['getscriptbytecode']
VM_ENV['consoleclear'] = (getgenv and getgenv()['consoleclear']) or _G['consoleclear'] or _G['consoleclear']
VM_ENV['mousemoverel'] = (getgenv and getgenv()['mousemoverel']) or _G['mousemoverel'] or _G['mousemoverel']
VM_ENV['mousemoveabs'] = (getgenv and getgenv()['mousemoveabs']) or _G['mousemoveabs'] or _G['mousemoveabs']
VM_ENV['getgc'] = (getgenv and getgenv()['getgc']) or _G['getgc'] or _G['getgc']
VM_ENV['mouse2release'] = (getgenv and getgenv()['mouse2release']) or _G['mouse2release'] or _G['mouse2release']
VM_ENV['settings'] = (getgenv and getgenv()['settings']) or _G['settings'] or _G['settings']
VM_ENV['mouse1release'] = (getgenv and getgenv()['mouse1release']) or _G['mouse1release'] or _G['mouse1release']
VM_ENV['setfpscap'] = (getgenv and getgenv()['setfpscap']) or _G['setfpscap'] or _G['setfpscap']
VM_ENV['mouse1press'] = (getgenv and getgenv()['mouse1press']) or _G['mouse1press'] or _G['mouse1press']
VM_ENV['http_request'] = (getgenv and getgenv()['http_request']) or _G['http_request'] or _G['http_request']
VM_ENV['isrbxactive'] = (getgenv and getgenv()['isrbxactive']) or _G['isrbxactive'] or _G['isrbxactive']
VM_ENV['setthreadidentity'] = (getgenv and getgenv()['setthreadidentity']) or _G['setthreadidentity'] or _G['setthreadidentity']
VM_ENV['getidentity'] = (getgenv and getgenv()['getidentity']) or _G['getidentity'] or _G['getidentity']
VM_ENV['getloadedmodules'] = (getgenv and getgenv()['getloadedmodules']) or _G['getloadedmodules'] or _G['getloadedmodules']
VM_ENV['fireclickdetector'] = (getgenv and getgenv()['fireclickdetector']) or _G['fireclickdetector'] or _G['fireclickdetector']
VM_ENV['Instance'] = (getgenv and getgenv()['Instance']) or _G['Instance'] or _G['Instance']
VM_ENV['rconsoleinput'] = (getgenv and getgenv()['rconsoleinput']) or _G['rconsoleinput'] or _G['rconsoleinput']
VM_ENV['disassemble'] = (getgenv and getgenv()['disassemble']) or _G['disassemble'] or _G['disassemble']
VM_ENV['isourclosure'] = (getgenv and getgenv()['isourclosure']) or _G['isourclosure'] or _G['isourclosure']
VM_ENV['newlclosure'] = (getgenv and getgenv()['newlclosure']) or _G['newlclosure'] or _G['newlclosure']
VM_ENV['newcclosure'] = (getgenv and getgenv()['newcclosure']) or _G['newcclosure'] or _G['newcclosure']
VM_ENV['listfiles'] = (getgenv and getgenv()['listfiles']) or _G['listfiles'] or _G['listfiles']
VM_ENV['iswindowactive'] = (getgenv and getgenv()['iswindowactive']) or _G['iswindowactive'] or _G['iswindowactive']
VM_ENV['getfunctions'] = (getgenv and getgenv()['getfunctions']) or _G['getfunctions'] or _G['getfunctions']
VM_ENV['setscriptable'] = (getgenv and getgenv()['setscriptable']) or _G['setscriptable'] or _G['setscriptable']
VM_ENV['getrenv'] = (getgenv and getgenv()['getrenv']) or _G['getrenv'] or _G['getrenv']
VM_ENV['gethwid'] = (getgenv and getgenv()['gethwid']) or _G['gethwid'] or _G['gethwid']
Sentinel,v1,alpha,__,_ = 'Protected By Sentinel (Please kill me)', function()end, true, 1, 0
-- Generic Helpers
local LuaFunc, WrapState, BcToState, gChunk;
local FIELDS_PER_FLUSH = 50
local Select = select;
-- Array Helpers
local function CreateTbl(_) return {} end;
local Unpack = unpack or table.unpack
local function Pack(...)
    return {
        n = Select('#', ...), ...
    }
end
local function Move(src, First, Last, Offset, Dst)
    for i = _, Last - First do
        Dst[Offset + i] = src[First + i]
    end
end
-- Mini Bit Library
local function BAnd(a, b)
    local result = _
    local bitval = __
    while a > _ and b > _ do
        if (a % 2 == __) and (b % 2 == __) then
            result = result + bitval
        end
        bitval = bitval * 2
        a = math.floor(a / 2)
        b = math.floor(b / 2)
    end
    return result
end
local function LShift(x, n)
    return x * 2 ^ n
end
local function RShift(x, n)
    return math.floor(x / 2 ^ n)
end
local function BOr(a, b)
    local result = _
    local shift = __
    while a > _ or b > _ do
        local abit = a % 2
        local bbit = b % 2
        if abit == __ or bbit == __ then
            result = result + shift
        end
        a = math.floor(a / 2)
        b = math.floor(b / 2)
        shift = shift * 2
    end
    return result
end
-- Upvalue Helpers
local function CloseLuaUpvalues(B, N)
    for i, uv in pairs(B) do
        if uv.N >= N then
            uv.m = uv.M[uv.N];
            uv.M = uv;
            uv.N = 'm'
            B[i] = nil;
        end;
    end;
end;
local function SenLuaUpvalue(B, N, X)
    local Prev = B[N]
    if not Prev then
        Prev = { N = N, M = X }
        B[N] = Prev;
    end;
    return Prev
end;
local function NormalizeNumber(value)
    if value % 1 == 0 then
        return value
    end
    return value
end

-- losing sanity, please help
local asciilookup = {}
for i = 0, 255 do
    asciilookup[string.char(i)] = i
end

local function chartoascii(str, pos)
    pos = pos or 1
    local ch = str:sub(pos, pos)
    return asciilookup[ch]
end

function BcToState(Bytecode, charset)
    local base, decoded = #charset, {}
    local decode_lookup = {}
    for i = 1, base do decode_lookup[charset:sub(i, i)] = i - 1 end
    -- do not FUCKING change the "_"
    for encoded_char in Bytecode:gmatch("([^_]+)") do
        local n = 0
        for i = 1, #encoded_char do n = n * base + decode_lookup[encoded_char:sub(i, i)] end
        decoded[#decoded + 1] = string.char(n)
    end
    local decoded_string = table.concat(decoded)
    local bytes = {}
    for i = 1, #decoded_string do
        bytes[#bytes + 1] = chartoascii(decoded_string, i)
    end

    local Pos = 1
    local function gBits8()
        local Val = bytes[Pos]
        Pos = Pos + 1
        return Val
    end
    local function gBits16()
        local Val1, Val2 = bytes[Pos], bytes[Pos + 1]
        Pos = Pos + 2
        return (Val2 * 256) + Val1
    end
    local function gBits32()
        local Val1, Val2, Val3, Val4 = bytes[Pos], bytes[Pos + 1], bytes[Pos + 2], bytes[Pos + 3]
        Pos = Pos + 4
        return (Val4 * 16777216) + (Val3 * 65536) + (Val2 * 256) + Val1
    end

    function gChunk()
        local Chunk = {
            n = gBits8(),
            c = gBits8(),
            d = gBits8(),
            x = {},
            D = {},
            V = {}
        }
        for i = __, gBits32() do
            local Data = gBits32()
            local Sco = gBits8()
            local Type = gBits8()
            local Inst = {
                m = Data,
                S = Sco,
                A = gBits16()
            }
            local Mode = {
                b = gBits8(),
                c = gBits8()
            }
            if (Type == __) then
                Inst.B = gBits16()
                Inst.C = gBits16()
                Inst.s = Mode.b == __ and Inst.B > 0xFF
                Inst.a = Mode.c == __ and Inst.C > 0xFF
            elseif (Type == 2) then
                Inst.F = gBits32()
                Inst.g = Mode.b == __
            elseif (Type == 3) then
                Inst.f = gBits32() - 131071
            end
            Chunk.x[i] = Inst
        end
        for i = __, gBits32() do
            local Type = gBits8()
            if (Type == __) then
                Chunk.D[i - __] = (gBits8() ~= _)
            elseif (Type == 3) then
                Chunk.D[i - __] = (function()
                    local Left = gBits32()
                    local Right = gBits32()
                    local IsNormal = __
                    local Mantissa = BOr(LShift(BAnd(Right, 0xFFFFF), 32), Left)
                    local Exponent = BAnd(RShift(Right, 20), 0x7FF)
                    local Sign = (-__) ^ RShift(Right, 31)
                    if Exponent == _ then
                        if Mantissa == _ then
                            return Sign * _
                        else
                            Exponent = __
                            IsNormal = _
                        end
                    elseif Exponent == 2047 then
                        if Mantissa == _ then
                            return Sign * (__ / _)
                        else
                            return Sign * (_ / _)
                        end
                    end
                    local raw = math.ldexp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)))
                    return NormalizeNumber(raw)
                end)()
            elseif (Type == 4) then
                Chunk.D[i - __] = (function()
                    local Str
                    local baik = gBits32()
                    if (baik == _) then return end
                    local chars = {}
                    for j = 1, baik do
                        chars[#chars + 1] = string.char(gBits8())
                    end
                    return table.concat(chars)
                end)()
            end
        end
        for i = __, gBits32() do
            Chunk.V[i - __] = gChunk()
        end

        for _, v in ipairs(Chunk.x) do
            if v.g then
                v.D = Chunk.D[v.F]
            else
                if v.s then
                    v.A = Chunk.D[v.B - 256]
                end
                if v.a then
                    v.C = Chunk.D[v.C - 256]
                end
            end
        end
        return Chunk
    end

    return gChunk()
end

function LuaFunc(State, Env, n)
    local x = State.x;
    local V = State.Z;
    local v = State.v;
    local Top = -__;
    local SenB = {}
    local X = State.X;
    local z = State.z;
    while alpha do
        local Inst = x[z]
        local S = Inst.S;
        local C = Inst.C;
        local A = Inst.A;
        local B = Inst.B;
        local D = Inst.D;
        local F = Inst.F;
        z = z + __;

if (S == 1) then
X[Inst.A] = (type(Inst.D) == "number" and Inst.D % 1 == 0) and math.floor(Inst.D) or Inst.D
elseif (S == 4) then
        local Uv = n[Inst.B]
        X[Inst.A] = Uv.M[Uv.N]
        
elseif (S == 5) then
        X[Inst.A] = Env[Inst.D]
        
elseif (S == 6) then
        local N
        if Inst.a then
            N = Inst.C;
        else
            N = X[Inst.C]
        end
        X[Inst.A] = X[Inst.B][N]
        
elseif (S == 7) then
        Env[Inst.D] = X[Inst.A]
        
elseif (S == 0) then
X[Inst.A] = X[Inst.B];
elseif (S == 33) then
        local A = Inst.A;
        local Base = A + 3;
        local Vals = {X[A](X[A + 1], X[A + 2])}
        Move(Vals, 1, Inst.C, Base, X)
        if X[Base] ~= nil then
            X[A + 2] = X[Base]
            z = z + Inst.sBx;
        end;
        z = z + 1
        
elseif (S == 26) then
        if (not X[Inst.A]) ~= (Inst.C ~= 0) then z = z + Inst.sBx end
        z = z + 1
        
elseif (S == 28) then
        local A = Inst.A;
        local B = Inst.B;
        local C = Inst.C;
        local Params;
        if B == 0 then
            Params = Top - A;
        else
            Params = B - 1;
        end;
        local RetB = Pack(X[A](Unpack(X, A + 1, A + Params)))
        local RetNum = RetB.n;
        if C == 0 then
            Top = A + RetNum - 1;
        else
            RetNum = C - 1;
        end;
        Move(RetB, 1, RetNum, A, X)
        
elseif (S == 29) then
        local A = Inst.A;
        local B = Inst.B;
        local Params;
        if B == 0 then
            Params = Top - A;
        else
            Params = B - 1;
        end;
        CloseLuaUpvalues(SenB, 0)
        return X[A](Unpack(X, A + 1, A + Params))
        
elseif (S == 30) then
        local A = Inst.A;
        local B = Inst.B;
        if B == 0 then        
            B = Top - A + 1;
        else
            B = B - 1;
        end;
        CloseLuaUpvalues(SenB, 0)
        return Unpack(X, A, A + B - 1)
        
elseif (S == 9) then
        local tbl = X[Inst.A]
        local key = Inst.B >= 256 and D[Inst.B - 256] or X[Inst.B]
        local val = Inst.C >= 256 and D[Inst.C - 256] or X[Inst.C]
        print('[DEBUG][OP_SETTABLE] tbl:', tbl, 'key:', key, 'val:', val, 'Inst.A:', Inst.A, 'Inst.B:', Inst.B, 'Inst.C:', Inst.C)
        tbl[key] = val
        
elseif (S == 36) then
        local Sub = V[Inst.Bx]
        local Nups = Sub.n;
        local UvB;
        if Nups ~= 0 then
            UvB = CreateTbl(Nups - 1)
            for i = 1, Nups do
                local Pseudo = x[z + i - 1]
                if (Pseudo.S == 0) then
                    UvB[i - 1] = SenLuaUpvalue(SenB, Pseudo.B, X)
                elseif (Pseudo.S == 4) then
                    UvB[i - 1] = n[Pseudo.B]
                end;
            end;
            z = z + Nups
        end;
        X[Inst.A] = WrapState(Sub, Env, UvB)
        
elseif (S == 20) then
X[Inst.A] = #X[Inst.B]
elseif (S == 11) then
        local A = Inst.A
        local B = Inst.B
        local N;
        if Inst.a then
            N = Inst.C
        else
            N = X[Inst.C]
        end
        X[A + 1] = X[B]
        X[A] = X[B][N]
        
elseif (S == 22) then
z = z + Inst.sBx
elseif (S == 23) then
        local Lhs, Rhs;
        if Inst.s then
            Lhs = Inst.B
        else
            Lhs = X[Inst.B]
        end
        if Inst.a then
            Rhs = Inst.C
        else
            Rhs = X[Inst.C]
        end
        if (Lhs == Rhs) == (Inst.A ~= 0) then z = z + Inst.sBx end;
        z = z + 1
        
elseif (S == 10) then
        X[Inst.A] = {}
        
end
        State.z = z;
    end;
end;
function WrapState(V, Env, Upval)
    local function Wrapped(...)
        local Passed = Pack(...)
        local X = CreateTbl(V.d)
        local v = { b = _, B = {} }
        Move(Passed, __, V.c, _, X)
        if (V.c < Passed.n) then
            local Start = V.c + __
            local b = Passed.n - V.c;
            v.b = b;
            Move(Passed, Start, Start + b - __, __, v.B)
        end;
        local State = {
            v = v,
            X = X,
            x = V.x,
            Z = V.V,
            z = __
        }
        return LuaFunc(State, Env, Upval)
    end;
    return Wrapped;
end;

print('--- Final VM_ENV Contents ---')
print('[VM_ENV] game:', type(VM_ENV.game))
print('[VM_ENV] gethwid:', type(VM_ENV.gethwid))
print('[VM_ENV] request:', type(VM_ENV.request))
print('[VM_ENV] pcall:', type(VM_ENV.pcall))
print('[VM_ENV] game:GetService:', type(VM_ENV.game and VM_ENV.game.GetService))
print('-----------------------------')
WrapState(BcToState
